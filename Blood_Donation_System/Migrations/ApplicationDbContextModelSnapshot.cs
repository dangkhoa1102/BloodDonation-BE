// <auto-generated />
using System;
using Blood_Donation_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blood_Donation_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blood_Donation_System.Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("BlogId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodComponent", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompatibilityRules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StorageRequirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ComponentId");

                    b.ToTable("BloodComponents");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodDonation", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DonationId");

                    b.HasIndex("DonorId");

                    b.HasIndex("RequestId");

                    b.ToTable("BloodDonations");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodRecipient", b =>
                {
                    b.Property<Guid>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MedicalCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecipientId");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRecipients");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodTypeRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int");

                    b.Property<Guid?>("RecipientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId");

                    b.HasIndex("BloodTypeRequiredId");

                    b.HasIndex("RecipientId");

                    b.ToTable("BloodRequests");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RhFactor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("BloodTypeId");

                    b.ToTable("BloodTypes");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodUnit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComponentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DonationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnitId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("ComponentTypeId");

                    b.HasIndex("DonationId");

                    b.ToTable("BloodUnits");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.DonationHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DonationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextEligibleDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonationHistories");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClosestFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextEligibleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("DonorId");

                    b.HasIndex("BloodTypeId");

                    b.HasIndex("ClosestFacilityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.MedicalFacility", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClosestDonorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("FacilityId");

                    b.HasIndex("ClosestDonorId");

                    b.ToTable("MedicalFacilities");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GeneratedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("GenerationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportId");

                    b.HasIndex("GeneratedById");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserIdCard")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Blog", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodDonation", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId");

                    b.HasOne("Blood_Donation_System.Models.BloodRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodRecipient", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodRequest", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.BloodType", "BloodTypeRequired")
                        .WithMany()
                        .HasForeignKey("BloodTypeRequiredId");

                    b.HasOne("Blood_Donation_System.Models.BloodRecipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.Navigation("BloodTypeRequired");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.BloodUnit", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId");

                    b.HasOne("Blood_Donation_System.Models.BloodComponent", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId");

                    b.HasOne("Blood_Donation_System.Models.BloodDonation", "Donation")
                        .WithMany()
                        .HasForeignKey("DonationId");

                    b.Navigation("BloodType");

                    b.Navigation("ComponentType");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.DonationHistory", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.Donor", "Donor")
                        .WithMany()
                        .HasForeignKey("DonorId");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Donor", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.BloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeId");

                    b.HasOne("Blood_Donation_System.Models.MedicalFacility", "ClosestFacility")
                        .WithMany()
                        .HasForeignKey("ClosestFacilityId");

                    b.HasOne("Blood_Donation_System.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Blood_Donation_System.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BloodType");

                    b.Navigation("ClosestFacility");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.MedicalFacility", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.Donor", "ClosestDonor")
                        .WithMany()
                        .HasForeignKey("ClosestDonorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ClosestDonor");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Notification", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blood_Donation_System.Models.Report", b =>
                {
                    b.HasOne("Blood_Donation_System.Models.User", "GeneratedBy")
                        .WithMany()
                        .HasForeignKey("GeneratedById");

                    b.Navigation("GeneratedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
