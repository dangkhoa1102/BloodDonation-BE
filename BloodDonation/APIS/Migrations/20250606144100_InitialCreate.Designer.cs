// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace APIS.Migrations
{
    [DbContext(typeof(BloodDonationSupportContext))]
    [Migration("20250606144100_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("blogID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("authorID");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("PublishDate")
                        .HasColumnType("date")
                        .HasColumnName("publishDate");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("title");

                    b.Property<int?>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("viewCount");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__FA0AA70D9275A0A2");

                    b.HasIndex(new[] { "AuthorId" }, "IX_Blog_Author");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("Models.BloodComponent", b =>
                {
                    b.Property<Guid>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("componentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompatibilityRules")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("compatibilityRules");

                    b.Property<string>("ComponentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("componentName");

                    b.Property<string>("StorageRequirements")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("storageRequirements");

                    b.HasKey("ComponentId")
                        .HasName("PK__BloodCom__667AC1267A572D98");

                    b.ToTable("BloodComponent", (string)null);
                });

            modelBuilder.Entity("Models.BloodDonation", b =>
                {
                    b.Property<Guid>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("donationID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("DonationDate")
                        .HasColumnType("date")
                        .HasColumnName("donationDate");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("donorID");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("DonationId")
                        .HasName("PK__BloodDon__F7F4F433F50E75C4");

                    b.HasIndex("DonorId");

                    b.HasIndex("RequestId");

                    b.ToTable("BloodDonation", (string)null);
                });

            modelBuilder.Entity("Models.BloodRecipient", b =>
                {
                    b.Property<Guid>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipientID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("contactInfo");

                    b.Property<string>("MedicalCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medicalCondition");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("urgencyLevel");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("RecipientId")
                        .HasName("PK__BloodRec__A9B8B5421A98978D");

                    b.HasIndex("UserId");

                    b.ToTable("BloodRecipient", (string)null);
                });

            modelBuilder.Entity("Models.BloodRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("requestID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BloodTypeRequired")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bloodTypeRequired");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int")
                        .HasColumnName("quantityNeeded");

                    b.Property<Guid?>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipientID");

                    b.Property<DateOnly?>("RequestDate")
                        .HasColumnType("date")
                        .HasColumnName("requestDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("UrgencyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("urgencyLevel");

                    b.HasKey("RequestId")
                        .HasName("PK__BloodReq__E3C5DE518396DD28");

                    b.HasIndex("RecipientId");

                    b.HasIndex(new[] { "BloodTypeRequired" }, "IX_BloodRequest_BloodType");

                    b.HasIndex(new[] { "Status" }, "IX_BloodRequest_Status");

                    b.ToTable("BloodRequest", (string)null);
                });

            modelBuilder.Entity("Models.BloodType", b =>
                {
                    b.Property<Guid>("BloodTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bloodTypeID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AboType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("aboType");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("RhFactor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("rhFactor");

                    b.HasKey("BloodTypeId")
                        .HasName("PK__BloodTyp__C879D794DF7754C0");

                    b.ToTable("BloodType", (string)null);
                });

            modelBuilder.Entity("Models.BloodUnit", b =>
                {
                    b.Property<Guid>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("unitID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bloodTypeID");

                    b.Property<Guid?>("ComponentType")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("componentType");

                    b.Property<Guid?>("DonationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("donationID");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiryDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("UnitId")
                        .HasName("PK__BloodUni__55D792156DF7DE87");

                    b.HasIndex("ComponentType");

                    b.HasIndex("DonationId");

                    b.HasIndex(new[] { "BloodTypeId" }, "IX_BloodUnit_BloodType");

                    b.HasIndex(new[] { "ExpiryDate" }, "IX_BloodUnit_ExpiryDate");

                    b.HasIndex(new[] { "Status" }, "IX_BloodUnit_Status");

                    b.ToTable("BloodUnit", (string)null);
                });

            modelBuilder.Entity("Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("documentID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("DownloadCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("downloadCount");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fileType");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("title");

                    b.Property<DateOnly?>("UploadDate")
                        .HasColumnType("date")
                        .HasColumnName("uploadDate");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__EFAAADE56699808C");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Models.DonationHistory", b =>
                {
                    b.Property<Guid>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("historyID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("DonationDate")
                        .HasColumnType("date")
                        .HasColumnName("donationDate");

                    b.Property<Guid?>("DonorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("donorID");

                    b.Property<string>("HealthStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("healthStatus");

                    b.Property<DateOnly?>("NextEligibleDate")
                        .HasColumnType("date")
                        .HasColumnName("nextEligibleDate");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("HistoryId")
                        .HasName("PK__Donation__19BDBDB32D843D12");

                    b.HasIndex("DonorId");

                    b.ToTable("DonationHistory", (string)null);
                });

            modelBuilder.Entity("Models.Donor", b =>
                {
                    b.Property<Guid>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("donorID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BloodTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bloodTypeID");

                    b.Property<Guid?>("ClosestFacilityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closestFacilityID");

                    b.Property<double?>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("isAvailable");

                    b.Property<DateOnly?>("LastDonationDate")
                        .HasColumnType("date")
                        .HasColumnName("lastDonationDate");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locationID");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medicalHistory");

                    b.Property<DateOnly?>("NextEligibleDate")
                        .HasColumnType("date")
                        .HasColumnName("nextEligibleDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.Property<double?>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.HasKey("DonorId")
                        .HasName("PK__Donor__A595D731BCCB1D8C");

                    b.HasIndex("ClosestFacilityId");

                    b.HasIndex(new[] { "BloodTypeId" }, "IX_Donor_BloodType");

                    b.HasIndex(new[] { "LocationId" }, "IX_Donor_Location");

                    b.HasIndex(new[] { "UserId" }, "IX_Donor_User");

                    b.ToTable("Donor", (string)null);
                });

            modelBuilder.Entity("Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("locationID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("district");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__30646B0E7475C78D");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Models.MedicalFacility", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("facilityID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<Guid?>("ClosestDonorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("closestDonorID");

                    b.Property<string>("Coordinates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("coordinates");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("facilityName");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Specialization")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("specialization");

                    b.HasKey("FacilityId")
                        .HasName("PK__MedicalF__AA548184FAC7F769");

                    b.HasIndex("ClosestDonorId");

                    b.ToTable("MedicalFacility", (string)null);
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("notificationID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notificationType");

                    b.Property<DateOnly?>("ScheduledDate")
                        .HasColumnType("date")
                        .HasColumnName("scheduledDate");

                    b.Property<DateOnly?>("SendDate")
                        .HasColumnType("date")
                        .HasColumnName("sendDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__4BA5CE8999822DB9");

                    b.HasIndex(new[] { "IsRead" }, "IX_Notification_IsRead");

                    b.HasIndex(new[] { "UserId" }, "IX_Notification_User");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reportID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("data");

                    b.Property<Guid?>("GeneratedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("generatedBy");

                    b.Property<DateOnly?>("GenerationDate")
                        .HasColumnType("date")
                        .HasColumnName("generationDate");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parameters");

                    b.Property<string>("ReportType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reportType");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__1C9B4ECD1C1211AF");

                    b.HasIndex(new[] { "GeneratedBy" }, "IX_Report_GeneratedBy");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("UserIdCard")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("userIdCard");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__users__CB9A1CDF1883DE01");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Models.Blog", b =>
                {
                    b.HasOne("Models.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Blog_Author");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.BloodDonation", b =>
                {
                    b.HasOne("Models.Donor", "Donor")
                        .WithMany("BloodDonations")
                        .HasForeignKey("DonorId")
                        .HasConstraintName("FK_BloodDonation_Donor");

                    b.HasOne("Models.BloodRequest", "Request")
                        .WithMany("BloodDonations")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_BloodDonation_Request");

                    b.Navigation("Donor");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Models.BloodRecipient", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("BloodRecipients")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_BloodRecipient_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.BloodRequest", b =>
                {
                    b.HasOne("Models.BloodType", "BloodTypeRequiredNavigation")
                        .WithMany("BloodRequests")
                        .HasForeignKey("BloodTypeRequired")
                        .HasConstraintName("FK_BloodRequest_BloodType");

                    b.HasOne("Models.BloodRecipient", "Recipient")
                        .WithMany("BloodRequests")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_BloodRequest_Recipient");

                    b.Navigation("BloodTypeRequiredNavigation");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Models.BloodUnit", b =>
                {
                    b.HasOne("Models.BloodType", "BloodType")
                        .WithMany("BloodUnits")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK_BloodUnit_BloodType");

                    b.HasOne("Models.BloodComponent", "ComponentTypeNavigation")
                        .WithMany("BloodUnits")
                        .HasForeignKey("ComponentType")
                        .HasConstraintName("FK_BloodUnit_Component");

                    b.HasOne("Models.BloodDonation", "Donation")
                        .WithMany("BloodUnits")
                        .HasForeignKey("DonationId")
                        .HasConstraintName("FK_BloodUnit_Donation");

                    b.Navigation("BloodType");

                    b.Navigation("ComponentTypeNavigation");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("Models.DonationHistory", b =>
                {
                    b.HasOne("Models.Donor", "Donor")
                        .WithMany("DonationHistories")
                        .HasForeignKey("DonorId")
                        .HasConstraintName("FK_DonationHistory_Donor");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("Models.Donor", b =>
                {
                    b.HasOne("Models.BloodType", "BloodType")
                        .WithMany("Donors")
                        .HasForeignKey("BloodTypeId")
                        .HasConstraintName("FK_Donor_BloodType");

                    b.HasOne("Models.MedicalFacility", "ClosestFacility")
                        .WithMany("Donors")
                        .HasForeignKey("ClosestFacilityId")
                        .HasConstraintName("FK_Donor_MedicalFacility");

                    b.HasOne("Models.Location", "Location")
                        .WithMany("Donors")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Donor_Location");

                    b.HasOne("Models.User", "User")
                        .WithMany("Donors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Donor_User");

                    b.Navigation("BloodType");

                    b.Navigation("ClosestFacility");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.MedicalFacility", b =>
                {
                    b.HasOne("Models.Donor", "ClosestDonor")
                        .WithMany("MedicalFacilities")
                        .HasForeignKey("ClosestDonorId")
                        .HasConstraintName("FK_MedicalFacility_Donor");

                    b.Navigation("ClosestDonor");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Report", b =>
                {
                    b.HasOne("Models.User", "GeneratedByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("GeneratedBy")
                        .HasConstraintName("FK_Report_User");

                    b.Navigation("GeneratedByNavigation");
                });

            modelBuilder.Entity("Models.BloodComponent", b =>
                {
                    b.Navigation("BloodUnits");
                });

            modelBuilder.Entity("Models.BloodDonation", b =>
                {
                    b.Navigation("BloodUnits");
                });

            modelBuilder.Entity("Models.BloodRecipient", b =>
                {
                    b.Navigation("BloodRequests");
                });

            modelBuilder.Entity("Models.BloodRequest", b =>
                {
                    b.Navigation("BloodDonations");
                });

            modelBuilder.Entity("Models.BloodType", b =>
                {
                    b.Navigation("BloodRequests");

                    b.Navigation("BloodUnits");

                    b.Navigation("Donors");
                });

            modelBuilder.Entity("Models.Donor", b =>
                {
                    b.Navigation("BloodDonations");

                    b.Navigation("DonationHistories");

                    b.Navigation("MedicalFacilities");
                });

            modelBuilder.Entity("Models.Location", b =>
                {
                    b.Navigation("Donors");
                });

            modelBuilder.Entity("Models.MedicalFacility", b =>
                {
                    b.Navigation("Donors");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("BloodRecipients");

                    b.Navigation("Donors");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
